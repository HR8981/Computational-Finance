//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "Distributions.xaml.h"
#include "FinancialChart.xaml.h"

void ::RenderEngine::Views::Distributions::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///Distributions.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
namespace RenderEngine {
namespace Views {
    ref class Distributions_obj1_BindingsTracking sealed : ::XamlBindingInfo::XamlBindingTrackingBase
    {
    internal:
        Distributions_obj1_BindingsTracking()
        {
        }

        // Event handlers

        void VectorChanged_String(::Windows::Foundation::Collections::IObservableVector<::Platform::String^>^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
        {
            VectorChanged(sender, e);
        }

        // Listener update functions

        void UpdateVectorChangedListener_String(::Windows::Foundation::Collections::IObservableVector<::Platform::String^>^ obj, ::Windows::Foundation::Collections::IObservableVector<::Platform::String^>^* pCache, ::Windows::Foundation::EventRegistrationToken* pToken)
        {
            if (*pCache != nullptr && !(*pCache)->Equals(obj))
            {
                (*pCache)->VectorChanged -= *pToken;
                *pCache = nullptr;
            }

            if (*pCache == nullptr && obj != nullptr)
            {
                *pCache = obj;
                *pToken = obj->VectorChanged += ref new ::Windows::Foundation::Collections::VectorChangedEventHandler<::Platform::String^>(
                    this, &RenderEngine::Views::Distributions_obj1_BindingsTracking::VectorChanged_String);
            }
        }
    };
}
}

/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class RenderEngine::Views::Distributions::Distributions_obj1_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::RenderEngine::Views::Distributions, RenderEngine::Views::Distributions_obj1_BindingsTracking>
{
public:
    Distributions_obj1_Bindings()
    {
    }

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 7: // Distributions.xaml line 106
                this->obj7 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
                break;
        }
    }

    void Disable(int lineNumber, int columnNumber)
    {
        if (lineNumber == 108 && columnNumber == 29)
        {
            isobj7ItemsSourceDisabled = true;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        throw ref new ::Platform::NotImplementedException();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        throw ref new ::Platform::NotImplementedException();
    }

private:
    // Fields for each control that has bindings.
    ::Windows::UI::Xaml::Controls::ListView^ obj7;

    // Static fields for each binding's enabled/disabled state
    static bool isobj7ItemsSourceDisabled;

    // Update methods for each path node used in binding steps.
    void Update_(::RenderEngine::Views::Distributions^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_ViewModel(obj->ViewModel, phase);
            }
        }
    }
    void Update_ViewModel(::RenderEngine::ViewModels::DistributionViewModel^ obj, int phase)
    {
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_ViewModel_DistributionTypes(obj->DistributionTypes, phase);
            }
        }
    }
    void Update_ViewModel_DistributionTypes(::Windows::Foundation::Collections::IObservableVector<::Platform::String^>^ obj, int phase)
    {
        if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // Distributions.xaml line 106
            if (!isobj7ItemsSourceDisabled)
            {
                Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this->obj7, obj, nullptr);
            }
        }
    }
    static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(::Windows::UI::Xaml::Controls::ItemsControl^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        obj->ItemsSource = value;
    }
};

    // Initializing static fields for each binding's enabled/disabled state
bool RenderEngine::Views::Distributions::Distributions_obj1_Bindings::isobj7ItemsSourceDisabled = false;

void ::RenderEngine::Views::Distributions::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 2:
        {
            this->LayoutRoot = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
        }
        break;
    case 3:
        {
            this->display = safe_cast<::RenderEngine::Controls::FinancialChart^>(__target);
        }
        break;
    case 4:
        {
            this->cmdbar = safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(this->cmdbar))->Opening += ref new ::Windows::Foundation::EventHandler<::Platform::Object^>(this, (void (::RenderEngine::Views::Distributions::*)
                (::Platform::Object^, ::Platform::Object^))&Distributions::CommandBar_Opening);
            (safe_cast<::Windows::UI::Xaml::Controls::CommandBar^>(this->cmdbar))->Closed += ref new ::Windows::Foundation::EventHandler<::Platform::Object^>(this, (void (::RenderEngine::Views::Distributions::*)
                (::Platform::Object^, ::Platform::Object^))&Distributions::CommandBar_Closed);
        }
        break;
    case 5:
        {
            ::Windows::UI::Xaml::Controls::Button^ element5 = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Button^>(element5))->Click += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::RenderEngine::Views::Distributions::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&Distributions::DrawClick);
        }
        break;
    case 6:
        {
            this->appbarbutton = safe_cast<::Windows::UI::Xaml::Controls::AppBarButton^>(__target);
        }
        break;
    case 7:
        {
            ::Windows::UI::Xaml::Controls::ListView^ element7 = safe_cast<::Windows::UI::Xaml::Controls::ListView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::ListView^>(element7))->ItemClick += ref new ::Windows::UI::Xaml::Controls::ItemClickEventHandler(this, (void (::RenderEngine::Views::Distributions::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ItemClickEventArgs^))&Distributions::DistributionClick);
        }
        break;
    case 9:
        {
            this->title = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::RenderEngine::Views::Distributions::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 1: // Distributions.xaml line 1
            {
                ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
                Distributions_obj1_Bindings* objBindings = new Distributions_obj1_Bindings();
                objBindings->SetDataRoot(this);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                this->Bindings = bindings;
                element1->Loading += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::FrameworkElement^, ::Platform::Object^>(bindings, &::XamlBindingInfo::XamlBindings::Loading);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element1, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)



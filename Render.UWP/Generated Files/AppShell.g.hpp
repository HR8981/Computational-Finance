//------------------------------------------------------------------------------
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//------------------------------------------------------------------------------
#include "pch.h"

#pragma warning(push)
#pragma warning(disable: 4100) // unreferenced formal parameter

#if defined _DEBUG && !defined DISABLE_XAML_GENERATED_BINDING_DEBUG_OUTPUT
extern "C" __declspec(dllimport) int __stdcall IsDebuggerPresent();
#endif

#include "AppShell.xaml.h"

void ::RenderEngine::AppShell::InitializeComponent()
{
    if (_contentLoaded)
    {
        return;
    }
    _contentLoaded = true;
    ::Windows::Foundation::Uri^ resourceLocator = ref new ::Windows::Foundation::Uri(L"ms-appx:///AppShell.xaml");
    ::Windows::UI::Xaml::Application::LoadComponent(this, resourceLocator, ::Windows::UI::Xaml::Controls::Primitives::ComponentResourceLocation::Application);
}


/// <summary>
/// Auto generated class for compiled bindings.
/// </summary>
class RenderEngine::AppShell::AppShell_obj2_Bindings 
    : public ::XamlBindingInfo::ReferenceTypeXamlBindings<::RenderEngine::Controls::NavMenuItem, ::XamlBindingInfo::XamlBindingTrackingBase>
    , public ::XamlBindingInfo::IXamlBindingTracking
{
public:
    AppShell_obj2_Bindings()
    {
        InitializeTracking(this);
    }

private:
    ~AppShell_obj2_Bindings()
    {
        ReleaseAllListeners();
    }

public:

    void Connect(int __connectionId, ::Platform::Object^ __target)
    {
        switch(__connectionId)
        {
            case 2: // AppShell.xaml line 18
                this->obj2 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                break;
            case 3: // AppShell.xaml line 24
                this->obj3 = safe_cast<::Windows::UI::Xaml::Shapes::Rectangle^>(__target);
                this->obj3->RegisterPropertyChangedCallback(::Windows::UI::Xaml::UIElement::VisibilityProperty,
                    ref new ::Windows::UI::Xaml::DependencyPropertyChangedCallback( 
                        [this] (::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
                        {
                            if (this->IsInitialized())
                            {
                                // Update Two Way binding
                                this->GetDataRoot()->SelectedVis = this->obj3->Visibility;
                            }
                        }));
                break;
            case 4: // AppShell.xaml line 38
                this->obj4 = safe_cast<::Windows::UI::Xaml::Controls::FontIcon^>(__target);
                break;
            case 5: // AppShell.xaml line 41
                this->obj5 = safe_cast<::Windows::UI::Xaml::Controls::TextBlock^>(__target);
                break;
        }
    }

    void DisconnectUnloadedObject(int connectionId)
    {
        throw ref new ::Platform::InvalidArgumentException("No unloadable elements to disconnect.");
    }

    void Recycle()
    {
        ReleaseAllListeners();
    }

    void ProcessBindings(::Platform::Object^ item, int itemIndex, int phase, int* nextPhase)
    {
        switch (phase)
        {
            case 0:
                *nextPhase = -1;
                this->SetDataRoot(static_cast<::RenderEngine::Controls::NavMenuItem^>(item));
                if (this->_dataContextChangedToken.Value != 0)
                {
                    this->obj2.Resolve<::Windows::UI::Xaml::Controls::Grid>()->DataContextChanged -= this->_dataContextChangedToken;
                    this->_dataContextChangedToken.Value = 0;
                }
                this->_isInitialized = true;
                break;
            default:
                *nextPhase = -1;
                break;
        }
        this->Update_((::RenderEngine::Controls::NavMenuItem^) item, 1 << phase);
    }

private:
    // Fields for each control that has bindings.
    ::Platform::WeakReference obj2;
    ::Windows::UI::Xaml::Shapes::Rectangle^ obj3;
    ::Windows::UI::Xaml::Controls::FontIcon^ obj4;
    ::Windows::UI::Xaml::Controls::TextBlock^ obj5;
    
    // Fields for binding tracking.
    ::Platform::WeakReference cachePC_;
    ::Windows::Foundation::EventRegistrationToken tokenPC_;

    // Update methods for each path node used in binding steps.
    void Update_(::RenderEngine::Controls::NavMenuItem^ obj, int phase)
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(obj, this->cachePC_, &tokenPC_);
        if (obj != nullptr)
        {
            if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
            {
                this->Update_SelectedVis(obj->SelectedVis, phase);
            }
            if ((phase & (NOT_PHASED | (1 << 0))) != 0)
            {
                this->Update_SymbolAsChar(obj->SymbolAsChar, phase);
                this->Update_Label(obj->Label, phase);
            }
        }
    }
    void Update_SelectedVis(::Windows::UI::Xaml::Visibility obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
        {
            // AppShell.xaml line 24
            Set_Windows_UI_Xaml_UIElement_Visibility(this->obj3, obj);
        }
    }
    void Update_SymbolAsChar(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // AppShell.xaml line 38
            Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(this->obj4, obj, nullptr);
        }
    }
    void Update_Label(::Platform::String^ obj, int phase)
    {
        if((phase & ((1 << 0) | NOT_PHASED )) != 0)
        {
            // AppShell.xaml line 38
            Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(this->obj4, obj, nullptr);
            // AppShell.xaml line 41
            Set_Windows_UI_Xaml_Controls_TextBlock_Text(this->obj5, obj, nullptr);
        }
    }

    virtual void ReleaseAllListeners() override
    {
        this->_bindingsTracking->UpdatePropertyChangedListener(nullptr, this->cachePC_, &tokenPC_);
    }

    virtual void PropertyChanged(Platform::Object^ sender, ::Windows::UI::Xaml::Data::PropertyChangedEventArgs^ e) override
    {
        if (this->GetDataRoot() != nullptr && this->GetDataRoot()->Equals(sender))
        {
            ::Platform::String^ propName = e->PropertyName;
            ::RenderEngine::Controls::NavMenuItem^ obj = safe_cast<::RenderEngine::Controls::NavMenuItem^>(sender);
            if (propName == nullptr || propName->IsEmpty())
            {
                if (obj != nullptr)
                {
                    this->Update_SelectedVis(obj->SelectedVis, DATA_CHANGED);
                }
            }
            else if (propName == "SelectedVis")
            {
                if (obj != nullptr)
                {
                    this->Update_SelectedVis(obj->SelectedVis, DATA_CHANGED);
                }
            }
        }
    }

    void CollectionChanged(::Platform::Object^ sender, ::Windows::UI::Xaml::Interop::NotifyCollectionChangedEventArgs^ e)
    {
    }

    void VectorChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IVectorChangedEventArgs^ e)
    {
    }

    void MapChanged(::Platform::Object^ sender, ::Windows::Foundation::Collections::IMapChangedEventArgs<::Platform::String^>^ e)
    {
    }

    void DependencyPropertyChanged(::Windows::UI::Xaml::DependencyObject^ sender, ::Windows::UI::Xaml::DependencyProperty^ prop)
    {
        if (sender != nullptr)
        {
        }
    }
    static void Set_Windows_UI_Xaml_UIElement_Visibility(::Windows::UI::Xaml::UIElement^ obj, ::Windows::UI::Xaml::Visibility value)
    {
        obj->Visibility = value;
    }
    static void Set_Windows_UI_Xaml_Controls_FontIcon_Glyph(::Windows::UI::Xaml::Controls::FontIcon^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Glyph = value;
    }
    static void Set_Windows_UI_Xaml_Controls_ToolTipService_ToolTip(::Windows::UI::Xaml::FrameworkElement^ obj, ::Platform::Object^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = (::Platform::Object^) ::Windows::UI::Xaml::Markup::XamlBindingHelper::ConvertValue(::Platform::Object::typeid, targetNullValue);
        }
        ::Windows::UI::Xaml::Controls::ToolTipService::SetToolTip(obj, value);
    }
    static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(::Windows::UI::Xaml::Controls::TextBlock^ obj, ::Platform::String^ value, ::Platform::String^ targetNullValue)
    {
        if (value == nullptr && targetNullValue != nullptr)
        {
            value = targetNullValue;
        }
        obj->Text = value;
    }
};

void ::RenderEngine::AppShell::Connect(int __connectionId, ::Platform::Object^ __target)
{
    switch (__connectionId)
    {
    case 1:
        {
            ::Windows::UI::Xaml::Controls::Page^ element1 = safe_cast<::Windows::UI::Xaml::Controls::Page^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Page^>(element1))->KeyDown += ref new ::Windows::UI::Xaml::Input::KeyEventHandler(this, (void (::RenderEngine::AppShell::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Input::KeyRoutedEventArgs^))&AppShell::AppShell_KeyDown);
        }
        break;
    case 6:
        {
            this->LayoutRoot = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
        }
        break;
    case 7:
        {
            this->TogglePaneButton = safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(this->TogglePaneButton))->Unchecked += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::RenderEngine::AppShell::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&AppShell::TogglePaneButton_Unchecked);
            (safe_cast<::Windows::UI::Xaml::Controls::Primitives::ToggleButton^>(this->TogglePaneButton))->Checked += ref new ::Windows::UI::Xaml::RoutedEventHandler(this, (void (::RenderEngine::AppShell::*)
                (::Platform::Object^, ::Windows::UI::Xaml::RoutedEventArgs^))&AppShell::TogglePaneButton_Checked);
        }
        break;
    case 8:
        {
            this->RootSplitView = safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::SplitView^>(this->RootSplitView))->PaneClosed += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::SplitView^, ::Platform::Object^>(this, (void (::RenderEngine::AppShell::*)
                (::Windows::UI::Xaml::Controls::SplitView^, ::Platform::Object^))&AppShell::RootSplitView_PaneClosed);
        }
        break;
    case 9:
        {
            this->PaneContentGrid = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
        }
        break;
    case 10:
        {
            this->NavMenuList = safe_cast<::RenderEngine::Controls::NavMenuListView^>(__target);
            (safe_cast<::RenderEngine::Controls::NavMenuListView^>(this->NavMenuList))->ContainerContentChanging += ref new ::Windows::Foundation::TypedEventHandler<::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^>(this, (void (::RenderEngine::AppShell::*)
                (::Windows::UI::Xaml::Controls::ListViewBase^, ::Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs^))&AppShell::NavMenuItemContainerContentChanging);
            (safe_cast<::RenderEngine::Controls::NavMenuListView^>(this->NavMenuList))->ItemInvoked += ref new ::Windows::Foundation::EventHandler<::Windows::UI::Xaml::Controls::ListViewItem^>(this, (void (::RenderEngine::AppShell::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Controls::ListViewItem^))&AppShell::NavMenuList_ItemInvoked);
        }
        break;
    case 11:
        {
            this->NavPaneDivider = safe_cast<::Windows::UI::Xaml::Shapes::Rectangle^>(__target);
        }
        break;
    case 12:
        {
            this->FeedbackNavPaneButton = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
        }
        break;
    case 13:
        {
            this->SettingsNavPaneButton = safe_cast<::Windows::UI::Xaml::Controls::Button^>(__target);
        }
        break;
    case 14:
        {
            this->frame = safe_cast<::Windows::UI::Xaml::Controls::Frame^>(__target);
            (safe_cast<::Windows::UI::Xaml::Controls::Frame^>(this->frame))->Navigating += ref new ::Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler(this, (void (::RenderEngine::AppShell::*)
                (::Platform::Object^, ::Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs^))&AppShell::OnNavigatingToPage);
        }
        break;
    }
    _contentLoaded = true;
}

::Windows::UI::Xaml::Markup::IComponentConnector^ ::RenderEngine::AppShell::GetBindingConnector(int __connectionId, ::Platform::Object^ __target)
{
    ::XamlBindingInfo::XamlBindings^ bindings = nullptr;
    switch (__connectionId)
    {
        case 2: // AppShell.xaml line 18
            {
                ::Windows::UI::Xaml::Controls::Grid^ element2 = safe_cast<::Windows::UI::Xaml::Controls::Grid^>(__target);
                AppShell_obj2_Bindings* objBindings = new AppShell_obj2_Bindings();
                objBindings->SetDataRoot(element2->DataContext);
                bindings = ref new ::XamlBindingInfo::XamlBindings(objBindings);
                bindings->SubscribeForDataContextChanged(element2);
                ::Windows::UI::Xaml::DataTemplate::SetExtensionInstance(element2, bindings);
                ::Windows::UI::Xaml::Markup::XamlBindingHelper::SetDataTemplateComponent(element2, bindings);
            }
            break;
    }
    return bindings;
}

#pragma warning(pop)


